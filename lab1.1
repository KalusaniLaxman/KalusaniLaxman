{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMjw8htpGQDPCNxxat/x3az",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/KalusaniLaxman/KalusaniLaxman/blob/main/lab1.1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bub-jqXTxflo",
        "outputId": "5f255efe-37fd-4d3e-adb6-a0d4713ae389"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "List 1: [1, 2, 3, 4, 5]\n",
            "List 2: [6, 7, 8, 9, 10]\n",
            "Type of list1: <class 'list'>\n",
            "\n",
            "Array 1: [1 2 3 4 5]\n",
            "Array 2: [ 6  7  8  9 10]\n",
            "Type of array1: <class 'numpy.ndarray'>\n",
            "\n",
            "Multiplication of lists (element-wise not possible directly): [6, 14, 24, 36, 50]\n",
            "Multiplication of arrays (element-wise): [ 6 14 24 36 50]\n",
            "Division of arrays (element-wise): [0.16666667 0.28571429 0.375      0.44444444 0.5       ]\n",
            "Power of array elements (element-wise): [ 1  4  9 16 25]\n",
            "\n",
            "Addition of Two: [ 7  9 11 13 15] implement np.sin()=[ 0.6569866   0.41211849 -0.99999021  0.42016704  0.65028784], log()=[1.94591015 2.19722458 2.39789527 2.56494936 2.7080502 ], np.exp()=[1.09663316e+03 8.10308393e+03 5.98741417e+04 4.42413392e+05\n",
            " 3.26901737e+06]\n"
          ]
        }
      ],
      "source": [
        "# Lists\n",
        "list1 = [1, 2, 3, 4, 5]\n",
        "list2 = [6, 7, 8, 9, 10]\n",
        "print(\"List 1:\", list1)\n",
        "print(\"List 2:\", list2)\n",
        "print(\"Type of list1:\", type(list1))\n",
        "\n",
        "# Arrays\n",
        "import numpy as np\n",
        "array1 = np.array([1, 2, 3, 4, 5])\n",
        "array2 = np.array([6, 7, 8, 9, 10])\n",
        "print(\"\\nArray 1:\", array1)\n",
        "print(\"Array 2:\", array2)\n",
        "print(\"Type of array1:\", type(array1))\n",
        "\n",
        "# Mathematical operations\n",
        "print(\"\\nMultiplication of lists (element-wise not possible directly):\", [x * y for x, y in zip(list1, list2)])\n",
        "print(\"Multiplication of arrays (element-wise):\", array1 * array2)\n",
        "print(\"Division of arrays (element-wise):\", array1 / array2)\n",
        "print(\"Power of array elements (element-wise):\", array1 ** 2)\n",
        "\n",
        "# Text with Numpy functions\n",
        "sum_arrays = array1 + array2\n",
        "text_output = \"Addition of Two: \" + str(sum_arrays) + \" implement np.sin()=\" + str(np.sin(sum_arrays)) + \", log()=\" + str(np.log(sum_arrays)) + \", np.exp()=\" + str(np.exp(sum_arrays))\n",
        "print(\"\\n\" + text_output)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "zNUOEN6O3R9n"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}